/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/customers/{customerId}/keys": {
    /** Get a list of all the API Keys available for this customer */
    get: {
      parameters: {
        path: {
          /** @description Customer Id to get keys for */
          customerId: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["ApiKeyHydraCollection"];
            "application/json": components["schemas"]["ApiKeyHydraCollection"];
            "text/json": components["schemas"]["ApiKeyHydraCollection"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "text/plain": components["schemas"]["Error"];
            "application/json": components["schemas"]["Error"];
            "text/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /**
     * Obtain a new API key by posting an empty payload.
     *
     * The return value contains both Key and Secret - it is the only time the Secret is visible
     * @description Sample request:
     *
     *     POST: /customers/1/keys
     *     { }
     */
    post: {
      parameters: {
        path: {
          /** @description Customer Id to create key for */
          customerId: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["ApiKey"];
            "application/json": components["schemas"]["ApiKey"];
            "text/json": components["schemas"]["ApiKey"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Error"];
            "application/json": components["schemas"]["Error"];
            "text/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/customers/{customerId}/keys/{key}": {
    /** Remove a key so that it can no longer be used. */
    delete: {
      parameters: {
        path: {
          /** @description Customer Id that owns key to be deleted */
          customerId: number;
          /** @description Key to remove */
          key: string;
        };
      };
      responses: {
        /** @description No Content */
        204: {
          content: never;
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Error"];
            "application/json": components["schemas"]["Error"];
            "text/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/customers": {
    /**
     * Get all the customers.
     * @description Although it returns a paged collection, the page size is always the total number of customers:
     * clients don't need to page this collection, it contains all customers.
     */
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["JObjectHydraCollection"];
            "application/json": components["schemas"]["JObjectHydraCollection"];
            "text/json": components["schemas"]["JObjectHydraCollection"];
          };
        };
      };
    };
    /**
     * Create a new Customer.
     *
     * Only an admin may call this.
     * @description Sample request:
     *
     *     POST: /customers
     *     {
     *         "Name": "new-url-friendly-name"
     *         "DisplayName": "Display Name"
     *     }
     */
    post: {
      /** @description Object containing new customer to create */
      requestBody?: {
        content: {
          "application/json-patch+json": components["schemas"]["Customer"];
          "application/json": components["schemas"]["Customer"];
          "text/json": components["schemas"]["Customer"];
          "application/*+json": components["schemas"]["Customer"];
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: never;
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Error"];
            "application/json": components["schemas"]["Error"];
            "text/json": components["schemas"]["Error"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Conflict */
        409: {
          content: {
            "text/plain": components["schemas"]["Error"];
            "application/json": components["schemas"]["Error"];
            "text/json": components["schemas"]["Error"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Error"];
            "application/json": components["schemas"]["Error"];
            "text/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/customers/{customerId}": {
    /** Get details of specified customer */
    get: {
      parameters: {
        path: {
          customerId: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Customer"];
            "application/json": components["schemas"]["Customer"];
            "text/json": components["schemas"]["Customer"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "text/plain": components["schemas"]["Error"];
            "application/json": components["schemas"]["Error"];
            "text/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /**
     * Make a partial update to customer.
     * Note: Only the DisplayName property can be updated
     * @description Sample request:
     *
     *     PATCH: /customers/100
     *     {
     *         "DisplayName": "Updated Display Name"
     *     }
     */
    patch: {
      parameters: {
        path: {
          /** @description Id of customer to Patch */
          customerId: number;
        };
      };
      /** @description Hydra model containing changes to make (only DisplayName is supported) */
      requestBody?: {
        content: {
          "application/json-patch+json": components["schemas"]["Customer"];
          "application/json": components["schemas"]["Customer"];
          "text/json": components["schemas"]["Customer"];
          "application/*+json": components["schemas"]["Customer"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Customer"];
            "application/json": components["schemas"]["Customer"];
            "text/json": components["schemas"]["Customer"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Error"];
            "application/json": components["schemas"]["Error"];
            "text/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/customers/{customerId}/allImages": {
    /**
     * Accepts a list of image identifiers, will return a list of matching images.
     *
     * This endpoint doesn't support paging - all results are returned in single page
     * @description Sample request:
     *
     *     POST: /customers/1/allImages
     *     {
     *         "@context": "http://www.w3.org/ns/hydra/context.jsonld",
     *         "@type":"Collection",
     *         "member": [
     *             { "id": "1/1/foo" },
     *             { "id": "1/99/bar" }
     *         ]
     *     }
     */
    post: {
      parameters: {
        path: {
          customerId: number;
        };
      };
      requestBody?: {
        content: {
          "application/json-patch+json": components["schemas"]["IdentifierOnlyHydraCollection"];
          "application/json": components["schemas"]["IdentifierOnlyHydraCollection"];
          "text/json": components["schemas"]["IdentifierOnlyHydraCollection"];
          "application/*+json": components["schemas"]["IdentifierOnlyHydraCollection"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["ImageHydraCollection"];
            "application/json": components["schemas"]["ImageHydraCollection"];
            "text/json": components["schemas"]["ImageHydraCollection"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Error"];
            "application/json": components["schemas"]["Error"];
            "text/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/customers/{customerId}/deleteImages": {
    /**
     * Accepts a list of image identifiers, will delete those that exist from DB
     * @description Sample request:
     *
     *     POST: /customers/1/deleteImages
     *     {
     *         "@context": "http://www.w3.org/ns/hydra/context.jsonld",
     *         "@type":"Collection",
     *         "member": [
     *             { "id": "1/1/foo" },
     *             { "id": "1/99/bar" }
     *         ]
     *     }
     */
    post: {
      parameters: {
        query?: {
          deleteFrom?: string;
        };
        path: {
          customerId: number;
        };
      };
      requestBody?: {
        content: {
          "application/json-patch+json": components["schemas"]["IdentifierOnlyHydraCollection"];
          "application/json": components["schemas"]["IdentifierOnlyHydraCollection"];
          "text/json": components["schemas"]["IdentifierOnlyHydraCollection"];
          "application/*+json": components["schemas"]["IdentifierOnlyHydraCollection"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
  };
  "/customers/{customerId}/originStrategies": {
    /** Get the user's origin strategies */
    get: {
      parameters: {
        path: {
          customerId: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["CustomerOriginStrategyHydraCollection"];
            "application/json": components["schemas"]["CustomerOriginStrategyHydraCollection"];
            "text/json": components["schemas"]["CustomerOriginStrategyHydraCollection"];
          };
        };
      };
    };
    /**
     * Update an origin strategy owned by the user
     * @description Sample request:
     *     POST: /customers/1/originStrategies
     *     {
     *          "regex": "http[s]?://(.*).my-regex.com",
     *          "order": "1",
     *          "strategy": "basic-http-authentication",
     *          "credentials": "{ \"user\": \"my-username\", \"password\": \"my-password\" }",
     *          "optimised": "false"
     *     }
     */
    post: {
      parameters: {
        path: {
          customerId: number;
        };
      };
      requestBody?: {
        content: {
          "application/json-patch+json": components["schemas"]["CustomerOriginStrategy"];
          "application/json": components["schemas"]["CustomerOriginStrategy"];
          "text/json": components["schemas"]["CustomerOriginStrategy"];
          "application/*+json": components["schemas"]["CustomerOriginStrategy"];
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: never;
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Error"];
            "application/json": components["schemas"]["Error"];
            "text/json": components["schemas"]["Error"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "text/plain": components["schemas"]["Error"];
            "application/json": components["schemas"]["Error"];
            "text/json": components["schemas"]["Error"];
          };
        };
        /** @description Conflict */
        409: {
          content: {
            "text/plain": components["schemas"]["Error"];
            "application/json": components["schemas"]["Error"];
            "text/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/customers/{customerId}/originStrategies/{strategyId}": {
    /** Get a specified origin strategy owned by the user */
    get: {
      parameters: {
        path: {
          customerId: number;
          strategyId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["CustomerOriginStrategy"];
            "application/json": components["schemas"]["CustomerOriginStrategy"];
            "text/json": components["schemas"]["CustomerOriginStrategy"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "text/plain": components["schemas"]["Error"];
            "application/json": components["schemas"]["Error"];
            "text/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /**
     * Update an origin strategy owned by the user
     * @description Sample request:
     *     PUT: /customers/1/originStrategies/68a8931b-e815-492b-bfe9-2f8135ba4898
     *     {
     *          "regex": "http[s]?://(.*).my-regex.com",
     *          "order": "1",
     *          "strategy": "basic-http-authentication",
     *          "credentials": "{ \"user\": \"my-username\", \"password\": \"my-password\" }",
     *          "optimised": "false"
     *     }
     */
    put: {
      parameters: {
        path: {
          customerId: number;
          strategyId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json-patch+json": components["schemas"]["CustomerOriginStrategy"];
          "application/json": components["schemas"]["CustomerOriginStrategy"];
          "text/json": components["schemas"]["CustomerOriginStrategy"];
          "application/*+json": components["schemas"]["CustomerOriginStrategy"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["CustomerOriginStrategy"];
            "application/json": components["schemas"]["CustomerOriginStrategy"];
            "text/json": components["schemas"]["CustomerOriginStrategy"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Error"];
            "application/json": components["schemas"]["Error"];
            "text/json": components["schemas"]["Error"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "text/plain": components["schemas"]["Error"];
            "application/json": components["schemas"]["Error"];
            "text/json": components["schemas"]["Error"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "text/plain": components["schemas"]["Error"];
            "application/json": components["schemas"]["Error"];
            "text/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** Delete a specified origin strategy owned by the user */
    delete: {
      parameters: {
        path: {
          customerId: number;
          strategyId: string;
        };
      };
      responses: {
        /** @description No Content */
        204: {
          content: never;
        };
        /** @description Not Found */
        404: {
          content: {
            "text/plain": components["schemas"]["Error"];
            "application/json": components["schemas"]["Error"];
            "text/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/customers/{customerId}/imageOptimisationPolicies": {
    /**
     * Get paged list of all customer accessible image optimisation policies (customer specific + global)
     *
     * Supports ?page= and ?pageSize= query parameters
     */
    get: {
      parameters: {
        path: {
          customerId: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["ImageOptimisationPolicyHydraCollection"];
            "application/json": components["schemas"]["ImageOptimisationPolicyHydraCollection"];
            "text/json": components["schemas"]["ImageOptimisationPolicyHydraCollection"];
          };
        };
      };
    };
  };
  "/customers/{customerId}/imageOptimisationPolicies/{imageOptimisationPolicyId}": {
    /** Get details of specified image optimisation policy */
    get: {
      parameters: {
        path: {
          customerId: number;
          imageOptimisationPolicyId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["ImageOptimisationPolicy"];
            "application/json": components["schemas"]["ImageOptimisationPolicy"];
            "text/json": components["schemas"]["ImageOptimisationPolicy"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "text/plain": components["schemas"]["Error"];
            "application/json": components["schemas"]["Error"];
            "text/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/customers/{customerId}/queue": {
    /** Get details of default customer queue */
    get: {
      parameters: {
        path: {
          /** @description Id of customer to get queue details for */
          customerId: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["CustomerQueue"];
            "application/json": components["schemas"]["CustomerQueue"];
            "text/json": components["schemas"]["CustomerQueue"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
    /**
     * Create a batch of images to ingest.
     *
     * These will be enqueued for processing and asynchronously ingested
     * @description Sample request:
     *
     *     POST: /customers/99/queue
     *     {
     *         "@context": "http://www.w3.org/ns/hydra/context.jsonld",
     *         "@type": "Collection",
     *         "member": [
     *         {
     *             "id": "foo",
     *             "space": 1,
     *             "origin": "https://example.origin/foo.jpg",
     *             "family": "I",
     *             "mediaType": "image/jpeg"
     *         },
     *         {
     *             "id": "bar",
     *             "space": 2,
     *             "origin": "https://example.origin/movie.mp4",
     *             "family": "T",
     *             "mediaType": "video/mp4"
     *         }
     *     }
     */
    post: {
      parameters: {
        path: {
          /** @description Id of customer to create batch for */
          customerId: number;
        };
      };
      /** @description Hydra collection of assets to add to batch */
      requestBody?: {
        content: {
          "application/json-patch+json": components["schemas"]["ImageHydraCollection"];
          "application/json": components["schemas"]["ImageHydraCollection"];
          "text/json": components["schemas"]["ImageHydraCollection"];
          "application/*+json": components["schemas"]["ImageHydraCollection"];
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: never;
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
  };
  "/customers/{customerId}/queue/priority": {
    /** Get details of priority customer queue */
    get: {
      parameters: {
        path: {
          /** @description Id of customer */
          customerId: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["CustomerQueue"];
            "application/json": components["schemas"]["CustomerQueue"];
            "text/json": components["schemas"]["CustomerQueue"];
          };
        };
      };
    };
    /**
     * Create a batch of images to ingest, adding request to priority queue
     *
     * The processing is the same but the priority queue is for images that need to be processed quickly.
     * Only Image assets are supported
     * @description Sample request:
     *
     *     POST: /customers/99/queue/priority
     *     {
     *         "@context": "http://www.w3.org/ns/hydra/context.jsonld",
     *         "@type": "Collection",
     *         "member": [
     *         {
     *             "id": "foo",
     *             "space": 1,
     *             "origin": "https://example.origin/foo.jpg",
     *             "family": "I",
     *             "mediaType": "image/jpeg"
     *         }
     *     }
     */
    post: {
      parameters: {
        path: {
          /** @description Id of customer to create batch for */
          customerId: number;
        };
      };
      /** @description Hydra collection of assets to add to batch */
      requestBody?: {
        content: {
          "application/json-patch+json": components["schemas"]["ImageHydraCollection"];
          "application/json": components["schemas"]["ImageHydraCollection"];
          "text/json": components["schemas"]["ImageHydraCollection"];
          "application/*+json": components["schemas"]["ImageHydraCollection"];
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: never;
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
  };
  "/customers/{customerId}/queue/batches/{batchId}": {
    /** Get details of specified batch */
    get: {
      parameters: {
        path: {
          /** @description Id of customer */
          customerId: number;
          /** @description Id of batch to load */
          batchId: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["CustomerQueue"];
            "application/json": components["schemas"]["CustomerQueue"];
            "text/json": components["schemas"]["CustomerQueue"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "text/plain": components["schemas"]["Error"];
            "application/json": components["schemas"]["Error"];
            "text/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/customers/{customerId}/queue/batches/{batchId}/images": {
    get: {
      parameters: {
        query?: {
          q?: string;
        };
        path: {
          customerId: number;
          batchId: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["ImageHydraCollection"];
            "application/json": components["schemas"]["ImageHydraCollection"];
            "text/json": components["schemas"]["ImageHydraCollection"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Error"];
            "application/json": components["schemas"]["Error"];
            "text/json": components["schemas"]["Error"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "text/plain": components["schemas"]["Error"];
            "application/json": components["schemas"]["Error"];
            "text/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/customers/{customerId}/queue/batches/{batchId}/test": {
    /**
     * Tests batch to check if superseded or completed and updates underlying batch accordingly.
     *
     * Post empty body.
     * @description Sample request:
     *
     *     POST: /customers/1/queue/batches/12345/test
     *     { }
     */
    post: {
      parameters: {
        path: {
          /** @description Id of customer */
          customerId: number;
          /** @description Id of batch to test */
          batchId: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  "/customers/{customerId}/queue/batches": {
    /**
     * Get details of all customer batches.
     *
     * Supports ?page= and ?pageSize= query parameters for paging
     */
    get: {
      parameters: {
        path: {
          /** @description Id of customer */
          customerId: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["BatchHydraCollection"];
            "application/json": components["schemas"]["BatchHydraCollection"];
            "text/json": components["schemas"]["BatchHydraCollection"];
          };
        };
      };
    };
  };
  "/customers/{customerId}/queue/active": {
    /**
     * Get details of customer active batches. An "active" batch is one that is incomplete and has not been superseded.
     *
     * Supports ?page= and ?pageSize= query parameters for paging
     */
    get: {
      parameters: {
        path: {
          /** @description Id of customer */
          customerId: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["BatchHydraCollection"];
            "application/json": components["schemas"]["BatchHydraCollection"];
            "text/json": components["schemas"]["BatchHydraCollection"];
          };
        };
      };
    };
  };
  "/customers/{customerId}/queue/recent": {
    /**
     * Get details of customer recent batches. These are all batches that are finished, ordered by latest finished.
     *
     * Supports ?page= and ?pageSize= query parameters for paging
     */
    get: {
      parameters: {
        path: {
          /** @description Id of customer */
          customerId: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["BatchHydraCollection"];
            "application/json": components["schemas"]["BatchHydraCollection"];
            "text/json": components["schemas"]["BatchHydraCollection"];
          };
        };
      };
    };
  };
  "/customers/{customerId}/resources/pdf/{queryName}": {
    /**
     * Deletes PDF generated for queryName using specified arguments.
     * This deletes both the control-file and PDF projection.
     * @description Sample request:
     *
     *     DELETE /customers/2/resources/pdf/my-named-query?args=1/10/teststring
     */
    delete: {
      parameters: {
        query?: {
          /** @description Named query arguments */
          args?: string;
        };
        path: {
          /** @description CustomerId to delete PDF from */
          customerId: number;
          /** @description Name of named query */
          queryName: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
  };
  "/customers/{customerId}/customHeaders": {
    /** Get a list of Custom Headers owned by the calling user */
    get: {
      parameters: {
        path: {
          customerId: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["CustomHeaderHydraCollection"];
            "application/json": components["schemas"]["CustomHeaderHydraCollection"];
            "text/json": components["schemas"]["CustomHeaderHydraCollection"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Error"];
            "application/json": components["schemas"]["Error"];
            "text/json": components["schemas"]["Error"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Error"];
            "application/json": components["schemas"]["Error"];
            "text/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /**
     * Create a new Custom Header owned by the calling user
     * @description Sample request:
     *
     *     POST: /customers/1/customHeaders
     *     {
     *         "key": "my-key",
     *         "value": "my-value"
     *         (optional) "space": 1
     *         (optional) "role": "https://api.dlcs.digirati.io/customers/1/roles/my-role"
     *     }
     */
    post: {
      parameters: {
        path: {
          customerId: number;
        };
      };
      requestBody?: {
        content: {
          "application/json-patch+json": components["schemas"]["CustomHeader"];
          "application/json": components["schemas"]["CustomHeader"];
          "text/json": components["schemas"]["CustomHeader"];
          "application/*+json": components["schemas"]["CustomHeader"];
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: never;
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Error"];
            "application/json": components["schemas"]["Error"];
            "text/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/customers/{customerId}/customHeaders/{customHeaderId}": {
    /** Get a specified Custom Header owned by the calling user */
    get: {
      parameters: {
        path: {
          customerId: number;
          customHeaderId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["CustomHeader"];
            "application/json": components["schemas"]["CustomHeader"];
            "text/json": components["schemas"]["CustomHeader"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "text/plain": components["schemas"]["Error"];
            "application/json": components["schemas"]["Error"];
            "text/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /**
     * Update an existing Custom Header owned by the calling user
     * @description Sample request:
     *
     *     PUT: /customers/1/customHeaders/3abc55fd-eb2d-47e8-8966-5f71d8e26476
     *     {
     *         "key": "my-new-key",
     *         "value": "my-new-value"
     *         (optional) "space": 2
     *         (optional) "role": "https://api.dlcs.digirati.io/customers/1/roles/my-new-role"
     *     }
     */
    put: {
      parameters: {
        path: {
          customerId: number;
          customHeaderId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json-patch+json": components["schemas"]["CustomHeader"];
          "application/json": components["schemas"]["CustomHeader"];
          "text/json": components["schemas"]["CustomHeader"];
          "application/*+json": components["schemas"]["CustomHeader"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["CustomHeader"];
            "application/json": components["schemas"]["CustomHeader"];
            "text/json": components["schemas"]["CustomHeader"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Error"];
            "application/json": components["schemas"]["Error"];
            "text/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** Delete a specified Custom Header owned by the calling user */
    delete: {
      parameters: {
        path: {
          customerId: number;
          customHeaderId: string;
        };
      };
      responses: {
        /** @description No Content */
        204: {
          content: never;
        };
        /** @description Not Found */
        404: {
          content: {
            "text/plain": components["schemas"]["Error"];
            "application/json": components["schemas"]["Error"];
            "text/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/customers/{customerId}/defaultDeliveryChannels": {
    /**
     * Get paged list of all customer accessible default delivery channels (customer specific + system)
     *
     * Supports ?page= and ?pageSize= query parameters
     */
    get: {
      parameters: {
        path: {
          customerId: number;
          space: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["DefaultDeliveryChannelHydraCollection"];
            "application/json": components["schemas"]["DefaultDeliveryChannelHydraCollection"];
            "text/json": components["schemas"]["DefaultDeliveryChannelHydraCollection"];
          };
        };
      };
    };
    /** Create a single default delivery channel */
    post: {
      parameters: {
        path: {
          customerId: number;
          space: number;
        };
      };
      requestBody?: {
        content: {
          "application/json-patch+json": components["schemas"]["DefaultDeliveryChannel"];
          "application/json": components["schemas"]["DefaultDeliveryChannel"];
          "text/json": components["schemas"]["DefaultDeliveryChannel"];
          "application/*+json": components["schemas"]["DefaultDeliveryChannel"];
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: never;
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
  };
  "/customers/{customerId}/spaces/{space}/defaultDeliveryChannels": {
    /**
     * Get paged list of all customer accessible default delivery channels (customer specific + system)
     *
     * Supports ?page= and ?pageSize= query parameters
     */
    get: {
      parameters: {
        path: {
          customerId: number;
          space: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["DefaultDeliveryChannelHydraCollection"];
            "application/json": components["schemas"]["DefaultDeliveryChannelHydraCollection"];
            "text/json": components["schemas"]["DefaultDeliveryChannelHydraCollection"];
          };
        };
      };
    };
    /** Create a single default delivery channel */
    post: {
      parameters: {
        path: {
          customerId: number;
          space: number;
        };
      };
      requestBody?: {
        content: {
          "application/json-patch+json": components["schemas"]["DefaultDeliveryChannel"];
          "application/json": components["schemas"]["DefaultDeliveryChannel"];
          "text/json": components["schemas"]["DefaultDeliveryChannel"];
          "application/*+json": components["schemas"]["DefaultDeliveryChannel"];
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: never;
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
  };
  "/customers/{customerId}/defaultDeliveryChannels/{defaultDeliveryChannelId}": {
    /** Get an individual customer accessible default delivery channel (customer specific + system) */
    get: {
      parameters: {
        path: {
          customerId: number;
          defaultDeliveryChannelId: string;
          space: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["DefaultDeliveryChannel"];
            "application/json": components["schemas"]["DefaultDeliveryChannel"];
            "text/json": components["schemas"]["DefaultDeliveryChannel"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
    /** Update a default delivery channel */
    put: {
      parameters: {
        path: {
          customerId: number;
          defaultDeliveryChannelId: string;
          space: number;
        };
      };
      requestBody?: {
        content: {
          "application/json-patch+json": components["schemas"]["DefaultDeliveryChannel"];
          "application/json": components["schemas"]["DefaultDeliveryChannel"];
          "text/json": components["schemas"]["DefaultDeliveryChannel"];
          "application/*+json": components["schemas"]["DefaultDeliveryChannel"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["DefaultDeliveryChannel"];
            "application/json": components["schemas"]["DefaultDeliveryChannel"];
            "text/json": components["schemas"]["DefaultDeliveryChannel"];
          };
        };
      };
    };
    /** Delete an individual customer accessible default delivery channel (customer specific + system) */
    delete: {
      parameters: {
        path: {
          customerId: number;
          defaultDeliveryChannelId: string;
          space: number;
        };
      };
      responses: {
        /** @description No Content */
        204: {
          content: never;
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
  };
  "/customers/{customerId}/spaces/{space}/defaultDeliveryChannels/{defaultDeliveryChannelId}": {
    /** Get an individual customer accessible default delivery channel (customer specific + system) */
    get: {
      parameters: {
        path: {
          customerId: number;
          defaultDeliveryChannelId: string;
          space: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["DefaultDeliveryChannel"];
            "application/json": components["schemas"]["DefaultDeliveryChannel"];
            "text/json": components["schemas"]["DefaultDeliveryChannel"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
    /** Update a default delivery channel */
    put: {
      parameters: {
        path: {
          customerId: number;
          defaultDeliveryChannelId: string;
          space: number;
        };
      };
      requestBody?: {
        content: {
          "application/json-patch+json": components["schemas"]["DefaultDeliveryChannel"];
          "application/json": components["schemas"]["DefaultDeliveryChannel"];
          "text/json": components["schemas"]["DefaultDeliveryChannel"];
          "application/*+json": components["schemas"]["DefaultDeliveryChannel"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["DefaultDeliveryChannel"];
            "application/json": components["schemas"]["DefaultDeliveryChannel"];
            "text/json": components["schemas"]["DefaultDeliveryChannel"];
          };
        };
      };
    };
    /** Delete an individual customer accessible default delivery channel (customer specific + system) */
    delete: {
      parameters: {
        path: {
          customerId: number;
          defaultDeliveryChannelId: string;
          space: number;
        };
      };
      responses: {
        /** @description No Content */
        204: {
          content: never;
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
  };
  "/customers/{customerId}/deliveryChannelPolicies": {
    /** Get a collection of nested DeliveryChannelPolicy collections, sorted by channel */
    get: {
      parameters: {
        path: {
          customerId: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["DeliveryChannelPolicyHydraNestedCollectionHydraCollection"];
            "application/json": components["schemas"]["DeliveryChannelPolicyHydraNestedCollectionHydraCollection"];
            "text/json": components["schemas"]["DeliveryChannelPolicyHydraNestedCollectionHydraCollection"];
          };
        };
      };
    };
  };
  "/customers/{customerId}/deliveryChannelPolicies/{deliveryChannelName}": {
    /** Get a collection of the customer's delivery channel policies for a specific channel */
    get: {
      parameters: {
        path: {
          customerId: number;
          deliveryChannelName: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["DeliveryChannelPolicyHydraCollection"];
            "application/json": components["schemas"]["DeliveryChannelPolicyHydraCollection"];
            "text/json": components["schemas"]["DeliveryChannelPolicyHydraCollection"];
          };
        };
      };
    };
    /**
     * Create a new policy for a specified delivery channel
     * @description Sample request:
     *
     *     POST: /customers/1/deliveryChannelPolicies/iiif-av
     *     {
     *         "name": "my-video-policy"
     *         "displayName": "My Video Policy",
     *         "policyData": "["video-mp4-720p"]"
     *     }
     */
    post: {
      parameters: {
        path: {
          customerId: number;
          deliveryChannelName: string;
        };
      };
      requestBody?: {
        content: {
          "application/json-patch+json": components["schemas"]["DeliveryChannelPolicy"];
          "application/json": components["schemas"]["DeliveryChannelPolicy"];
          "text/json": components["schemas"]["DeliveryChannelPolicy"];
          "application/*+json": components["schemas"]["DeliveryChannelPolicy"];
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: never;
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Error"];
            "application/json": components["schemas"]["Error"];
            "text/json": components["schemas"]["Error"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Error"];
            "application/json": components["schemas"]["Error"];
            "text/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/customers/{customerId}/deliveryChannelPolicies/{deliveryChannelName}/{deliveryChannelPolicyName}": {
    /** Get a delivery channel policy belonging to a customer */
    get: {
      parameters: {
        path: {
          customerId: number;
          deliveryChannelName: string;
          deliveryChannelPolicyName: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["DeliveryChannelPolicy"];
            "application/json": components["schemas"]["DeliveryChannelPolicy"];
            "text/json": components["schemas"]["DeliveryChannelPolicy"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "text/plain": components["schemas"]["Error"];
            "application/json": components["schemas"]["Error"];
            "text/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /**
     * Create or update a specified customer delivery channel policy - "name" must be specified in URI
     * @description Sample request:
     *
     *     PUT: /customers/1/deliveryChannelPolicies/iiif-av/my-video-policy
     *     {
     *         "displayName": "My Updated Video Policy",
     *         "policyData": "["video-mp4-720p"]"
     *     }
     */
    put: {
      parameters: {
        path: {
          customerId: number;
          deliveryChannelName: string;
          deliveryChannelPolicyName: string;
        };
      };
      requestBody?: {
        content: {
          "application/json-patch+json": components["schemas"]["DeliveryChannelPolicy"];
          "application/json": components["schemas"]["DeliveryChannelPolicy"];
          "text/json": components["schemas"]["DeliveryChannelPolicy"];
          "application/*+json": components["schemas"]["DeliveryChannelPolicy"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["DeliveryChannelPolicy"];
            "application/json": components["schemas"]["DeliveryChannelPolicy"];
            "text/json": components["schemas"]["DeliveryChannelPolicy"];
          };
        };
        /** @description Created */
        201: {
          content: never;
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Error"];
            "application/json": components["schemas"]["Error"];
            "text/json": components["schemas"]["Error"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Error"];
            "application/json": components["schemas"]["Error"];
            "text/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** Delete a specified delivery channel policy */
    delete: {
      parameters: {
        path: {
          customerId: number;
          deliveryChannelName: string;
          deliveryChannelPolicyName: string;
        };
      };
      responses: {
        /** @description Accepted */
        202: {
          content: never;
        };
        /** @description Not Found */
        404: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
    /**
     * Update the supplied fields for a specified customer delivery channel policy
     * @description Sample request:
     *
     *     PATCH: /customers/1/deliveryChannelPolicies/iiif-av/my-video-policy
     *     {
     *         "displayName": "My Updated Video Policy"
     *     }
     */
    patch: {
      parameters: {
        path: {
          customerId: number;
          deliveryChannelName: string;
          deliveryChannelPolicyName: string;
        };
      };
      requestBody?: {
        content: {
          "application/json-patch+json": components["schemas"]["DeliveryChannelPolicy"];
          "application/json": components["schemas"]["DeliveryChannelPolicy"];
          "text/json": components["schemas"]["DeliveryChannelPolicy"];
          "application/*+json": components["schemas"]["DeliveryChannelPolicy"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["DeliveryChannelPolicy"];
            "application/json": components["schemas"]["DeliveryChannelPolicy"];
            "text/json": components["schemas"]["DeliveryChannelPolicy"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Error"];
            "application/json": components["schemas"]["Error"];
            "text/json": components["schemas"]["Error"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "text/plain": components["schemas"]["Error"];
            "application/json": components["schemas"]["Error"];
            "text/json": components["schemas"]["Error"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Error"];
            "application/json": components["schemas"]["Error"];
            "text/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/": {
    /** Main EntryPoint of API, containing Hypermedia links */
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["EntryPoint"];
            "application/json": components["schemas"]["EntryPoint"];
            "text/json": components["schemas"]["EntryPoint"];
          };
        };
      };
    };
  };
  "/customers/{customerId}/spaces/{spaceId}/images/{imageId}": {
    /** Get details of a single Hydra Image. */
    get: {
      parameters: {
        path: {
          customerId: number;
          spaceId: number;
          imageId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Image"];
            "application/json": components["schemas"]["Image"];
            "text/json": components["schemas"]["Image"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "text/plain": components["schemas"]["Error"];
            "application/json": components["schemas"]["Error"];
            "text/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /**
     * Create or update asset at specified ID.
     *
     * PUT requests always trigger reingesting of asset - in general batch processing should be preferred.
     *
     * Image + File assets are ingested synchronously. Timebased assets are ingested asynchronously.
     *
     * "File" property should be base64 encoded image, if included.
     * @description Sample request:
     *
     *     PUT: /customers/1/spaces/1/images/my-image
     *     {
     *         "@type":"Image",
     *         "family": "I",
     *         "origin": "https://example.text/.../image.jpeg",
     *         "mediaType": "image/jpeg",
     *         "string1": "my-metadata"
     *     }
     */
    put: {
      parameters: {
        path: {
          customerId: number;
          spaceId: number;
          imageId: string;
        };
      };
      /** @description The body of the request contains the Asset in Hydra JSON-LD form (Image class) */
      requestBody?: {
        content: {
          "application/json-patch+json": components["schemas"]["ImageWithFile"];
          "application/json": components["schemas"]["ImageWithFile"];
          "text/json": components["schemas"]["ImageWithFile"];
          "application/*+json": components["schemas"]["ImageWithFile"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Image"];
            "application/json": components["schemas"]["Image"];
            "text/json": components["schemas"]["Image"];
          };
        };
        /** @description Created */
        201: {
          content: {
            "text/plain": components["schemas"]["Image"];
            "application/json": components["schemas"]["Image"];
            "text/json": components["schemas"]["Image"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Method Not Allowed */
        405: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Server Error */
        501: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Server Error */
        507: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
    /**
     * Ingest specified file bytes to DLCS. Only "I" family assets are accepted.
     * "File" property should be base64 encoded image.
     * @description Sample request:
     *
     *     POST: /customers/1/spaces/1/images/my-image
     *     {
     *         "@type":"Image",
     *         "family": "I",
     *         "file": "/9j/4AAQSkZJRgABAQAAAQABAAD/2wBDAAM...."
     *     }
     */
    post: {
      parameters: {
        path: {
          customerId: number;
          spaceId: number;
          imageId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json-patch+json": components["schemas"]["ImageWithFile"];
          "application/json": components["schemas"]["ImageWithFile"];
          "text/json": components["schemas"]["ImageWithFile"];
          "application/*+json": components["schemas"]["ImageWithFile"];
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: {
            "text/plain": components["schemas"]["Image"];
            "application/json": components["schemas"]["Image"];
            "text/json": components["schemas"]["Image"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
    /**
     * DELETE asset at specified location. This will remove asset immediately, generated derivatives will be picked up
     * and processed eventually.
     */
    delete: {
      parameters: {
        query?: {
          deleteFrom?: string;
        };
        path: {
          customerId: number;
          spaceId: number;
          imageId: string;
        };
      };
      responses: {
        /** @description No Content */
        204: {
          content: never;
        };
        /** @description Not Found */
        404: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
    /**
     * Make a partial update to an existing asset resource.
     *
     * This may trigger a reingest depending on which fields have been updated.
     *
     * PATCH asset at that location.
     * @description Sample request:
     *
     *     PATCH: /customers/1/spaces/1/images/my-image
     *     {
     *         "origin": "https://example.text/.../image.jpeg",
     *         "string1": "my-new-metadata"
     *     }
     */
    patch: {
      parameters: {
        path: {
          customerId: number;
          spaceId: number;
          imageId: string;
        };
      };
      /** @description The body of the request contains the Asset in Hydra JSON-LD form (Image class) */
      requestBody?: {
        content: {
          "application/json-patch+json": components["schemas"]["Image"];
          "application/json": components["schemas"]["Image"];
          "text/json": components["schemas"]["Image"];
          "application/*+json": components["schemas"]["Image"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Image"];
            "application/json": components["schemas"]["Image"];
            "text/json": components["schemas"]["Image"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Method Not Allowed */
        405: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Server Error */
        501: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Server Error */
        507: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
  };
  "/customers/{customerId}/spaces/{spaceId}/images/{imageId}/reingest": {
    /**
     * Reingest asset at specified location
     * @description Sample request:
     *
     *     POST /customers/99/spaces/10/images/changed_image/reingest
     */
    post: {
      parameters: {
        path: {
          customerId: number;
          spaceId: number;
          imageId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
  };
  "/customers/{customerId}/spaces/{spaceId}/images/{imageId}/metadata": {
    /** Get transcode metadata for Timebased assets */
    get: {
      parameters: {
        path: {
          customerId: number;
          spaceId: number;
          imageId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["TranscoderJob"];
            "application/json": components["schemas"]["TranscoderJob"];
            "text/json": components["schemas"]["TranscoderJob"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Error"];
            "application/json": components["schemas"]["Error"];
            "text/json": components["schemas"]["Error"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "text/plain": components["schemas"]["Error"];
            "application/json": components["schemas"]["Error"];
            "text/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/customers/{customerId}/spaces/{spaceId}/images": {
    get: {
      parameters: {
        query?: {
          q?: string;
        };
        path: {
          customerId: number;
          spaceId: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["ImageHydraCollection"];
            "application/json": components["schemas"]["ImageHydraCollection"];
            "text/json": components["schemas"]["ImageHydraCollection"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "text/plain": components["schemas"]["Error"];
            "application/json": components["schemas"]["Error"];
            "text/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /**
     * PATCH a collection of images.
     * This is for bulk patch operations on images in the same space.
     * @description Sample request:
     *
     *     PATCH: /customers/1/spaces/5/images
     *     {
     *         "@context": "http://www.w3.org/ns/hydra/context.jsonld",
     *         "@type": "Collection",
     *         "member": [
     *         {
     *             "id": "identifier-1",
     *             "string3": "patched"
     *         }]
     *     }
     */
    patch: {
      parameters: {
        path: {
          /** @description (from resource path) */
          customerId: number;
          /** @description (from resource path) */
          spaceId: number;
        };
      };
      /** @description The JSON-LD request body, a HydraCollection of Hydra Image objects. */
      requestBody?: {
        content: {
          "application/json-patch+json": components["schemas"]["ImageHydraCollection"];
          "application/json": components["schemas"]["ImageHydraCollection"];
          "text/json": components["schemas"]["ImageHydraCollection"];
          "application/*+json": components["schemas"]["ImageHydraCollection"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["ImageHydraCollection"];
            "application/json": components["schemas"]["ImageHydraCollection"];
            "text/json": components["schemas"]["ImageHydraCollection"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Error"];
            "application/json": components["schemas"]["Error"];
            "text/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/customers/{customerId}/namedQueries": {
    /** Get a list of all available Named Queries, either global or owned by the user */
    get: {
      parameters: {
        path: {
          customerId: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["NamedQueryHydraCollection"];
            "application/json": components["schemas"]["NamedQueryHydraCollection"];
            "text/json": components["schemas"]["NamedQueryHydraCollection"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "text/plain": components["schemas"]["Error"];
            "application/json": components["schemas"]["Error"];
            "text/json": components["schemas"]["Error"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Error"];
            "application/json": components["schemas"]["Error"];
            "text/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /**
     * Create a new Named Query owned by the user - Only administrators may create a global named query
     * @description Sample request:
     *
     *     POST: /customers/1/namedQueries
     *     {
     *         "name":"my-named-query",
     *         "template":"space=example"
     *     }
     */
    post: {
      parameters: {
        path: {
          customerId: number;
        };
      };
      requestBody?: {
        content: {
          "application/json-patch+json": components["schemas"]["NamedQuery"];
          "application/json": components["schemas"]["NamedQuery"];
          "text/json": components["schemas"]["NamedQuery"];
          "application/*+json": components["schemas"]["NamedQuery"];
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: never;
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Error"];
            "application/json": components["schemas"]["Error"];
            "text/json": components["schemas"]["Error"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "text/plain": components["schemas"]["Error"];
            "application/json": components["schemas"]["Error"];
            "text/json": components["schemas"]["Error"];
          };
        };
        /** @description Conflict */
        409: {
          content: {
            "text/plain": components["schemas"]["Error"];
            "application/json": components["schemas"]["Error"];
            "text/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/customers/{customerId}/namedQueries/{namedQueryId}": {
    /** Get a specified Named Query, either global or owned by the user */
    get: {
      parameters: {
        path: {
          customerId: number;
          namedQueryId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["NamedQuery"];
            "application/json": components["schemas"]["NamedQuery"];
            "text/json": components["schemas"]["NamedQuery"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "text/plain": components["schemas"]["Error"];
            "application/json": components["schemas"]["Error"];
            "text/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /**
     * Update an existing Named Query owned by the user - currently, only the template can be modified
     * @description Sample request:
     *
     *     PUT: /customers/1/namedQueries/a90d6e44-4cdb-410b-999e-30c2ea3955b2
     *     {
     *         "template":"space=example-updated"
     *     }
     */
    put: {
      parameters: {
        path: {
          customerId: number;
          namedQueryId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json-patch+json": components["schemas"]["NamedQuery"];
          "application/json": components["schemas"]["NamedQuery"];
          "text/json": components["schemas"]["NamedQuery"];
          "application/*+json": components["schemas"]["NamedQuery"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["NamedQuery"];
            "application/json": components["schemas"]["NamedQuery"];
            "text/json": components["schemas"]["NamedQuery"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Error"];
            "application/json": components["schemas"]["Error"];
            "text/json": components["schemas"]["Error"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "text/plain": components["schemas"]["Error"];
            "application/json": components["schemas"]["Error"];
            "text/json": components["schemas"]["Error"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "text/plain": components["schemas"]["Error"];
            "application/json": components["schemas"]["Error"];
            "text/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** Delete a specified Named Query owned by the user */
    delete: {
      parameters: {
        path: {
          customerId: number;
          namedQueryId: string;
        };
      };
      responses: {
        /** @description No Content */
        204: {
          content: never;
        };
        /** @description Not Found */
        404: {
          content: {
            "text/plain": components["schemas"]["Error"];
            "application/json": components["schemas"]["Error"];
            "text/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/imageOptimisationPolicies": {
    /**
     * Get paged list of all global image optimisation policies.
     *
     * Supports ?page= and ?pageSize= query parameters
     */
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["ImageOptimisationPolicyHydraCollection"];
            "application/json": components["schemas"]["ImageOptimisationPolicyHydraCollection"];
            "text/json": components["schemas"]["ImageOptimisationPolicyHydraCollection"];
          };
        };
      };
    };
  };
  "/imageOptimisationPolicies/{imageOptimisationPolicyId}": {
    /** Get details of specified image optimisation policy */
    get: {
      parameters: {
        path: {
          imageOptimisationPolicyId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["ImageOptimisationPolicy"];
            "application/json": components["schemas"]["ImageOptimisationPolicy"];
            "text/json": components["schemas"]["ImageOptimisationPolicy"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "text/plain": components["schemas"]["Error"];
            "application/json": components["schemas"]["Error"];
            "text/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/storagePolicies": {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["StoragePolicyHydraCollection"];
            "application/json": components["schemas"]["StoragePolicyHydraCollection"];
            "text/json": components["schemas"]["StoragePolicyHydraCollection"];
          };
        };
      };
    };
  };
  "/storagePolicies/{storagePolicyId}": {
    /** Get details of specified storage policy */
    get: {
      parameters: {
        path: {
          storagePolicyId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["StoragePolicy"];
            "application/json": components["schemas"]["StoragePolicy"];
            "text/json": components["schemas"]["StoragePolicy"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "text/plain": components["schemas"]["Error"];
            "application/json": components["schemas"]["Error"];
            "text/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/thumbnailPolicies": {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["ThumbnailPolicyHydraCollection"];
            "application/json": components["schemas"]["ThumbnailPolicyHydraCollection"];
            "text/json": components["schemas"]["ThumbnailPolicyHydraCollection"];
          };
        };
      };
    };
  };
  "/thumbnailPolicies/{thumbnailPolicyId}": {
    /** Get details of specified thumbnail policy */
    get: {
      parameters: {
        path: {
          thumbnailPolicyId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["ThumbnailPolicy"];
            "application/json": components["schemas"]["ThumbnailPolicy"];
            "text/json": components["schemas"]["ThumbnailPolicy"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "text/plain": components["schemas"]["Error"];
            "application/json": components["schemas"]["Error"];
            "text/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/originStrategies": {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["OriginStrategyHydraCollection"];
            "application/json": components["schemas"]["OriginStrategyHydraCollection"];
            "text/json": components["schemas"]["OriginStrategyHydraCollection"];
          };
        };
      };
    };
  };
  "/originStrategies/{originStrategyId}": {
    /** Get details of specified origin strategy */
    get: {
      parameters: {
        path: {
          originStrategyId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["OriginStrategy"];
            "application/json": components["schemas"]["OriginStrategy"];
            "text/json": components["schemas"]["OriginStrategy"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "text/plain": components["schemas"]["Error"];
            "application/json": components["schemas"]["Error"];
            "text/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/customers/{customerId}/portalUsers": {
    /** GET /customers/{customerId}/portalUsers */
    get: {
      parameters: {
        path: {
          customerId: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["PortalUserHydraCollection"];
            "application/json": components["schemas"]["PortalUserHydraCollection"];
            "text/json": components["schemas"]["PortalUserHydraCollection"];
          };
        };
      };
    };
    /** POST /customers/{customerId}/portalUsers */
    post: {
      parameters: {
        path: {
          customerId: number;
        };
      };
      requestBody?: {
        content: {
          "application/json-patch+json": components["schemas"]["PortalUser"];
          "application/json": components["schemas"]["PortalUser"];
          "text/json": components["schemas"]["PortalUser"];
          "application/*+json": components["schemas"]["PortalUser"];
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: never;
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Error"];
            "application/json": components["schemas"]["Error"];
            "text/json": components["schemas"]["Error"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Error"];
            "application/json": components["schemas"]["Error"];
            "text/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/customers/{customerId}/portalUsers/{userId}": {
    /** GET /customers/{customerId}/portalUsers/{userId} */
    get: {
      parameters: {
        path: {
          customerId: number;
          userId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["PortalUser"];
            "application/json": components["schemas"]["PortalUser"];
            "text/json": components["schemas"]["PortalUser"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "text/plain": components["schemas"]["Error"];
            "application/json": components["schemas"]["Error"];
            "text/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** DELETE /customers/{customerId}/portalUsers/{userId} */
    delete: {
      parameters: {
        path: {
          customerId: number;
          userId: string;
        };
      };
      responses: {
        /** @description No Content */
        204: {
          content: never;
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Error"];
            "application/json": components["schemas"]["Error"];
            "text/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** PATCH /customers/{customerId}/portalUsers/{userId} */
    patch: {
      parameters: {
        path: {
          customerId: number;
          userId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json-patch+json": components["schemas"]["PortalUser"];
          "application/json": components["schemas"]["PortalUser"];
          "text/json": components["schemas"]["PortalUser"];
          "application/*+json": components["schemas"]["PortalUser"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["PortalUser"];
            "application/json": components["schemas"]["PortalUser"];
            "text/json": components["schemas"]["PortalUser"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Error"];
            "application/json": components["schemas"]["Error"];
            "text/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/queue": {
    /**
     * Get counts of requests per queue.
     *
     * This includes DLCS-internal queue's and external queues (e.g. SQS)
     */
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["QueueSummary"];
            "application/json": components["schemas"]["QueueSummary"];
            "text/json": components["schemas"]["QueueSummary"];
          };
        };
      };
    };
  };
  "/customers/{customerId}/spaces": {
    /** Get details of all spaces for customer. */
    get: {
      parameters: {
        query?: {
          page?: number;
          pageSize?: number;
          orderBy?: string;
          orderByDescending?: string;
        };
        path: {
          customerId: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["SpaceHydraCollection"];
            "application/json": components["schemas"]["SpaceHydraCollection"];
            "text/json": components["schemas"]["SpaceHydraCollection"];
          };
        };
      };
    };
    /**
     * Create a new space within this customer. DLCS assigns identity.
     * @description Sample request:
     *
     *     POST: /customers/1/spaces
     *     {
     *         "@type":"Space",
     *         "name":"foo"
     *     }
     */
    post: {
      parameters: {
        path: {
          customerId: number;
        };
      };
      requestBody?: {
        content: {
          "application/json-patch+json": components["schemas"]["Space"];
          "application/json": components["schemas"]["Space"];
          "text/json": components["schemas"]["Space"];
          "application/*+json": components["schemas"]["Space"];
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: never;
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
  };
  "/customers/{customerId}/spaces/{spaceId}": {
    /** Get details of specified customers space */
    get: {
      parameters: {
        path: {
          customerId: number;
          spaceId: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Space"];
            "application/json": components["schemas"]["Space"];
            "text/json": components["schemas"]["Space"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
    /**
     * Create or update a space within this customer. A new space's ID is set by the user in the URL.
     * @description Sample request:
     *
     *     PUT: /customers/1/spaces/1
     *     {
     *         "@type":"Space",
     *         "name":"foo"
     *     }
     */
    put: {
      parameters: {
        path: {
          customerId: number;
          spaceId: number;
        };
      };
      requestBody?: {
        content: {
          "application/json-patch+json": components["schemas"]["Space"];
          "application/json": components["schemas"]["Space"];
          "text/json": components["schemas"]["Space"];
          "application/*+json": components["schemas"]["Space"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Space"];
            "application/json": components["schemas"]["Space"];
            "text/json": components["schemas"]["Space"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Conflict */
        409: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Server Error */
        500: {
          content: never;
        };
      };
    };
    /** Delete a specified customers space */
    delete: {
      parameters: {
        path: {
          customerId: number;
          spaceId: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Space"];
            "application/json": components["schemas"]["Space"];
            "text/json": components["schemas"]["Space"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
    /**
     * Make a partial update of an existing space
     * @description Sample request:
     *
     *     PATCH: /customers/1/spaces/1
     *     {
     *         "@type":"Space",
     *         "name":"foo"
     *     }
     */
    patch: {
      parameters: {
        path: {
          customerId: number;
          spaceId: number;
        };
      };
      requestBody?: {
        content: {
          "application/json-patch+json": components["schemas"]["Space"];
          "application/json": components["schemas"]["Space"];
          "text/json": components["schemas"]["Space"];
          "application/*+json": components["schemas"]["Space"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Space"];
            "application/json": components["schemas"]["Space"];
            "text/json": components["schemas"]["Space"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Conflict */
        409: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  "/customers/{customerId}/spaces/{spaceId}/images/{imageId}/storage": {
    /** Gets the storage object of an image within a customer's space */
    get: {
      parameters: {
        path: {
          customerId: number;
          spaceId: number;
          imageId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["ImageStorage"];
            "application/json": components["schemas"]["ImageStorage"];
            "text/json": components["schemas"]["ImageStorage"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "text/plain": components["schemas"]["Error"];
            "application/json": components["schemas"]["Error"];
            "text/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/customers/{customerId}/spaces/{spaceId}/storage": {
    /** Get the storage object of a customer's space */
    get: {
      parameters: {
        path: {
          customerId: number;
          spaceId: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["CustomerStorage"];
            "application/json": components["schemas"]["CustomerStorage"];
            "text/json": components["schemas"]["CustomerStorage"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "text/plain": components["schemas"]["Error"];
            "application/json": components["schemas"]["Error"];
            "text/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/customers/{customerId}/storage": {
    /** Get the customer's default storage object */
    get: {
      parameters: {
        path: {
          customerId: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["CustomerStorage"];
            "application/json": components["schemas"]["CustomerStorage"];
            "text/json": components["schemas"]["CustomerStorage"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "text/plain": components["schemas"]["Error"];
            "application/json": components["schemas"]["Error"];
            "text/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    ApiKey: {
      id?: string | null;
      context?: string | null;
      /** Format: int32 */
      customerId?: number;
      key?: string | null;
      secret?: string | null;
      type?: string | null;
    };
    ApiKeyHydraCollection: {
      id?: string | null;
      withContext?: boolean;
      context?: string | null;
      type?: string | null;
      /** Format: int32 */
      totalItems?: number;
      /** Format: int32 */
      pageSize?: number | null;
      members?: components["schemas"]["ApiKey"][] | null;
      view?: components["schemas"]["PartialCollectionView"];
    };
    /**
     * Format: int32
     * @enum {integer}
     */
    AssetFamily: 70 | 73 | 84;
    Batch: {
      id?: string | null;
      context?: string | null;
      type?: string | null;
      /** Format: int32 */
      modelId?: number;
      /** Format: int32 */
      customerId?: number;
      /** Format: date-time */
      submitted?: string;
      /** Format: int32 */
      count?: number;
      /** Format: int32 */
      completed?: number;
      /** Format: date-time */
      finished?: string | null;
      /** Format: int32 */
      errors?: number;
      superseded?: boolean;
      /** Format: date-time */
      estCompletion?: string | null;
      images?: string | null;
      completedImages?: string | null;
      errorImages?: string | null;
      test?: string | null;
    };
    BatchHydraCollection: {
      id?: string | null;
      withContext?: boolean;
      context?: string | null;
      type?: string | null;
      /** Format: int32 */
      totalItems?: number;
      /** Format: int32 */
      pageSize?: number | null;
      members?: components["schemas"]["Batch"][] | null;
      view?: components["schemas"]["PartialCollectionView"];
    };
    CustomHeader: {
      id?: string | null;
      context?: string | null;
      type?: string | null;
      modelId?: string | null;
      /** Format: int32 */
      customerId?: number;
      role?: string | null;
      key?: string | null;
      value?: string | null;
      /** Format: int32 */
      spaceId?: number | null;
    };
    CustomHeaderHydraCollection: {
      id?: string | null;
      withContext?: boolean;
      context?: string | null;
      type?: string | null;
      /** Format: int32 */
      totalItems?: number;
      /** Format: int32 */
      pageSize?: number | null;
      members?: components["schemas"]["CustomHeader"][] | null;
      view?: components["schemas"]["PartialCollectionView"];
    };
    Customer: {
      id?: string | null;
      context?: string | null;
      type?: string | null;
      /** Format: int32 */
      modelId?: number;
      name?: string | null;
      displayName?: string | null;
      portalUsers?: string | null;
      namedQueries?: string | null;
      originStrategies?: string | null;
      deliveryChannelPolicies?: string | null;
      defaultDeliveryChannels?: string | null;
      authServices?: string | null;
      roleProviders?: string | null;
      roles?: string | null;
      queue?: string | null;
      spaces?: string | null;
      allImages?: string | null;
      storage?: string | null;
      keys?: string | null;
      customHeaders?: string | null;
      administrator?: boolean | null;
      /** Format: date-time */
      created?: string | null;
      acceptedAgreement?: boolean | null;
    };
    CustomerOriginStrategy: {
      id?: string | null;
      context?: string | null;
      type?: string | null;
      modelId?: string | null;
      /** Format: int32 */
      customerId?: number;
      regex?: string | null;
      originStrategy?: string | null;
      credentials?: string | null;
      optimised?: boolean | null;
      /** Format: int32 */
      order?: number | null;
    };
    CustomerOriginStrategyHydraCollection: {
      id?: string | null;
      withContext?: boolean;
      context?: string | null;
      type?: string | null;
      /** Format: int32 */
      totalItems?: number;
      /** Format: int32 */
      pageSize?: number | null;
      members?: components["schemas"]["CustomerOriginStrategy"][] | null;
      view?: components["schemas"]["PartialCollectionView"];
    };
    CustomerQueue: {
      id?: string | null;
      context?: string | null;
      type?: string | null;
      /** Format: int32 */
      customerId?: number;
      /** Format: int32 */
      size?: number;
      /** Format: int64 */
      batchesWaiting?: number;
      /** Format: int64 */
      imagesWaiting?: number;
      batches?: string | null;
      images?: string | null;
      active?: string | null;
      recent?: string | null;
      priority?: string | null;
    };
    CustomerStorage: {
      id?: string | null;
      context?: string | null;
      type?: string | null;
      /** Format: int32 */
      customerId?: number;
      /** Format: int32 */
      spaceId?: number | null;
      /** Format: int64 */
      numberOfStoredImages?: number | null;
      /** Format: int64 */
      totalSizeOfStoredImages?: number | null;
      /** Format: int64 */
      totalSizeOfThumbnails?: number | null;
      /** Format: date-time */
      lastCalculated?: string | null;
      storagePolicy?: string | null;
    };
    DefaultDeliveryChannel: {
      id?: string | null;
      context?: string | null;
      type?: string | null;
      channel?: string | null;
      policy?: string | null;
      mediaType?: string | null;
    };
    DefaultDeliveryChannelHydraCollection: {
      id?: string | null;
      withContext?: boolean;
      context?: string | null;
      type?: string | null;
      /** Format: int32 */
      totalItems?: number;
      /** Format: int32 */
      pageSize?: number | null;
      members?: components["schemas"]["DefaultDeliveryChannel"][] | null;
      view?: components["schemas"]["PartialCollectionView"];
    };
    DeliveryChannel: {
      id?: string | null;
      type?: string | null;
      context?: string | null;
      channel?: string | null;
      policy?: string | null;
    };
    DeliveryChannelPolicy: {
      id?: string | null;
      context?: string | null;
      type?: string | null;
      /** Format: int32 */
      customerId?: number;
      name?: string | null;
      displayName?: string | null;
      channel?: string | null;
      policyData?: string | null;
      /** Format: date-time */
      created?: string | null;
      /** Format: date-time */
      modified?: string | null;
    };
    DeliveryChannelPolicyHydraCollection: {
      id?: string | null;
      withContext?: boolean;
      context?: string | null;
      type?: string | null;
      /** Format: int32 */
      totalItems?: number;
      /** Format: int32 */
      pageSize?: number | null;
      members?: components["schemas"]["DeliveryChannelPolicy"][] | null;
      view?: components["schemas"]["PartialCollectionView"];
    };
    DeliveryChannelPolicyHydraNestedCollection: {
      id?: string | null;
      withContext?: boolean;
      context?: string | null;
      /** Format: int32 */
      totalItems?: number;
      /** Format: int32 */
      pageSize?: number | null;
      members?: components["schemas"]["DeliveryChannelPolicy"][] | null;
      view?: components["schemas"]["PartialCollectionView"];
      type?: string | null;
      title?: string | null;
    };
    DeliveryChannelPolicyHydraNestedCollectionHydraCollection: {
      id?: string | null;
      withContext?: boolean;
      context?: string | null;
      type?: string | null;
      /** Format: int32 */
      totalItems?: number;
      /** Format: int32 */
      pageSize?: number | null;
      members?: components["schemas"]["DeliveryChannelPolicyHydraNestedCollection"][] | null;
      view?: components["schemas"]["PartialCollectionView"];
    };
    EntryPoint: {
      id?: string | null;
      context?: string | null;
      type?: string | null;
      customers?: string | null;
      originStrategies?: string | null;
      portalRoles?: string | null;
      imageOptimisationPolicies?: string | null;
      thumbnailPolicies?: string | null;
      storagePolicies?: string | null;
    };
    Error: {
      id?: string | null;
      withContext?: boolean;
      context?: string | null;
      /** Format: int32 */
      statusCode?: number;
      title?: string | null;
      description?: string | null;
      type?: string | null;
      errorTypeUri?: string | null;
      /** Format: int32 */
      status?: number;
      detail?: string | null;
      instance?: string | null;
    };
    IdentifierOnly: {
      id?: string | null;
    };
    IdentifierOnlyHydraCollection: {
      id?: string | null;
      withContext?: boolean;
      context?: string | null;
      type?: string | null;
      /** Format: int32 */
      totalItems?: number;
      /** Format: int32 */
      pageSize?: number | null;
      members?: components["schemas"]["IdentifierOnly"][] | null;
      view?: components["schemas"]["PartialCollectionView"];
    };
    Image: {
      id?: string | null;
      context?: string | null;
      type?: string | null;
      /** Format: int32 */
      customerId?: number;
      storageIdentifier?: string | null;
      modelId?: string | null;
      /** Format: int32 */
      space?: number;
      imageService?: string | null;
      degradedInfoJson?: string | null;
      thumbnailImageService?: string | null;
      thumbnail400?: string | null;
      /** Format: date-time */
      created?: string | null;
      origin?: string | null;
      /** Format: int32 */
      maxUnauthorised?: number | null;
      /** Format: date-time */
      queued?: string | null;
      /** Format: date-time */
      dequeued?: string | null;
      /** Format: date-time */
      finished?: string | null;
      ingesting?: boolean | null;
      error?: string | null;
      tags?: string[] | null;
      string1?: string | null;
      string2?: string | null;
      string3?: string | null;
      /** Format: int32 */
      number1?: number | null;
      /** Format: int32 */
      number2?: number | null;
      /** Format: int32 */
      number3?: number | null;
      /** Format: int64 */
      duration?: number | null;
      /** Format: int32 */
      width?: number | null;
      /** Format: int32 */
      height?: number | null;
      metadata?: string | null;
      storage?: string | null;
      mediaType?: string | null;
      family?: components["schemas"]["AssetFamily"];
      text?: string | null;
      textType?: string | null;
      deliveryChannels?: components["schemas"]["DeliveryChannel"][] | null;
      roles?: string[] | null;
      batch?: string | null;
      imageOptimisationPolicy?: string | null;
      thumbnailPolicy?: string | null;
    };
    ImageHydraCollection: {
      id?: string | null;
      withContext?: boolean;
      context?: string | null;
      type?: string | null;
      /** Format: int32 */
      totalItems?: number;
      /** Format: int32 */
      pageSize?: number | null;
      members?: components["schemas"]["Image"][] | null;
      view?: components["schemas"]["PartialCollectionView"];
    };
    ImageOptimisationPolicy: {
      id?: string | null;
      context?: string | null;
      type?: string | null;
      modelId?: string | null;
      /** Format: int32 */
      customerId?: number | null;
      name?: string | null;
      technicalDetails?: string | null;
      global?: boolean | null;
    };
    ImageOptimisationPolicyHydraCollection: {
      id?: string | null;
      withContext?: boolean;
      context?: string | null;
      type?: string | null;
      /** Format: int32 */
      totalItems?: number;
      /** Format: int32 */
      pageSize?: number | null;
      members?: components["schemas"]["ImageOptimisationPolicy"][] | null;
      view?: components["schemas"]["PartialCollectionView"];
    };
    ImageStorage: {
      id?: string | null;
      context?: string | null;
      type?: string | null;
      modelId?: string | null;
      /** Format: int32 */
      customerId?: number;
      /** Format: int32 */
      spaceId?: number;
      /** Format: int64 */
      thumbnailSize?: number;
      /** Format: int64 */
      size?: number;
      /** Format: date-time */
      lastChecked?: string | null;
      checkingInProgress?: boolean;
    };
    ImageWithFile: {
      id?: string | null;
      context?: string | null;
      type?: string | null;
      /** Format: int32 */
      customerId?: number;
      storageIdentifier?: string | null;
      modelId?: string | null;
      /** Format: int32 */
      space?: number;
      imageService?: string | null;
      degradedInfoJson?: string | null;
      thumbnailImageService?: string | null;
      thumbnail400?: string | null;
      /** Format: date-time */
      created?: string | null;
      origin?: string | null;
      /** Format: int32 */
      maxUnauthorised?: number | null;
      /** Format: date-time */
      queued?: string | null;
      /** Format: date-time */
      dequeued?: string | null;
      /** Format: date-time */
      finished?: string | null;
      ingesting?: boolean | null;
      error?: string | null;
      tags?: string[] | null;
      string1?: string | null;
      string2?: string | null;
      string3?: string | null;
      /** Format: int32 */
      number1?: number | null;
      /** Format: int32 */
      number2?: number | null;
      /** Format: int32 */
      number3?: number | null;
      /** Format: int64 */
      duration?: number | null;
      /** Format: int32 */
      width?: number | null;
      /** Format: int32 */
      height?: number | null;
      metadata?: string | null;
      storage?: string | null;
      mediaType?: string | null;
      family?: components["schemas"]["AssetFamily"];
      text?: string | null;
      textType?: string | null;
      deliveryChannels?: components["schemas"]["DeliveryChannel"][] | null;
      roles?: string[] | null;
      batch?: string | null;
      imageOptimisationPolicy?: string | null;
      thumbnailPolicy?: string | null;
      /** Format: byte */
      file?: string | null;
    };
    JObjectHydraCollection: {
      id?: string | null;
      withContext?: boolean;
      context?: string | null;
      type?: string | null;
      /** Format: int32 */
      totalItems?: number;
      /** Format: int32 */
      pageSize?: number | null;
      members?: {
          [key: string]: components["schemas"]["JToken"];
        }[] | null;
      view?: components["schemas"]["PartialCollectionView"];
    };
    JToken: components["schemas"]["JToken"][];
    NamedQuery: {
      id?: string | null;
      context?: string | null;
      type?: string | null;
      modelId?: string | null;
      /** Format: int32 */
      customerId?: number;
      name?: string | null;
      global?: boolean | null;
      template?: string | null;
    };
    NamedQueryHydraCollection: {
      id?: string | null;
      withContext?: boolean;
      context?: string | null;
      type?: string | null;
      /** Format: int32 */
      totalItems?: number;
      /** Format: int32 */
      pageSize?: number | null;
      members?: components["schemas"]["NamedQuery"][] | null;
      view?: components["schemas"]["PartialCollectionView"];
    };
    OriginStrategy: {
      id?: string | null;
      context?: string | null;
      type?: string | null;
      modelId?: string | null;
      name?: string | null;
      requiresCredentials?: boolean;
    };
    OriginStrategyHydraCollection: {
      id?: string | null;
      withContext?: boolean;
      context?: string | null;
      type?: string | null;
      /** Format: int32 */
      totalItems?: number;
      /** Format: int32 */
      pageSize?: number | null;
      members?: components["schemas"]["OriginStrategy"][] | null;
      view?: components["schemas"]["PartialCollectionView"];
    };
    PartialCollectionView: {
      id?: string | null;
      withContext?: boolean;
      context?: string | null;
      type?: string | null;
      first?: string | null;
      previous?: string | null;
      next?: string | null;
      last?: string | null;
      /** Format: int32 */
      page?: number;
      /** Format: int32 */
      pageSize?: number;
      /** Format: int32 */
      totalPages?: number;
    };
    PortalUser: {
      id?: string | null;
      context?: string | null;
      type?: string | null;
      modelId?: string | null;
      /** Format: int32 */
      customerId?: number;
      email?: string | null;
      password?: string | null;
      /** Format: date-time */
      created?: string | null;
      roles?: string | null;
      enabled?: boolean | null;
    };
    PortalUserHydraCollection: {
      id?: string | null;
      withContext?: boolean;
      context?: string | null;
      type?: string | null;
      /** Format: int32 */
      totalItems?: number;
      /** Format: int32 */
      pageSize?: number | null;
      members?: components["schemas"]["PortalUser"][] | null;
      view?: components["schemas"]["PartialCollectionView"];
    };
    ProblemDetails: {
      type?: string | null;
      title?: string | null;
      /** Format: int32 */
      status?: number | null;
      detail?: string | null;
      instance?: string | null;
      [key: string]: unknown;
    };
    QueueSummary: {
      id?: string | null;
      context?: string | null;
      type?: string | null;
      /** Format: int32 */
      incoming?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      timebased?: number;
      /** Format: int32 */
      transcodeComplete?: number;
      /** Format: int32 */
      file?: number;
      /**
       * Format: int32
       * @deprecated
       */
      failed?: number;
      /**
       * Format: int32
       * @deprecated
       */
      success?: number;
    };
    Space: {
      id?: string | null;
      context?: string | null;
      type?: string | null;
      /** Format: int32 */
      customerId?: number;
      /** Format: int32 */
      modelId?: number | null;
      name?: string | null;
      /** Format: date-time */
      created?: string | null;
      defaultTags?: string[] | null;
      /** Format: int32 */
      maxUnauthorised?: number | null;
      /** Format: int64 */
      approximateNumberOfImages?: number | null;
      defaultRoles?: string[] | null;
      images?: string | null;
      defaultDeliveryChannels?: string | null;
      metadata?: string | null;
      storage?: string | null;
    };
    SpaceHydraCollection: {
      id?: string | null;
      withContext?: boolean;
      context?: string | null;
      type?: string | null;
      /** Format: int32 */
      totalItems?: number;
      /** Format: int32 */
      pageSize?: number | null;
      members?: components["schemas"]["Space"][] | null;
      view?: components["schemas"]["PartialCollectionView"];
    };
    StoragePolicy: {
      id?: string | null;
      context?: string | null;
      type?: string | null;
      modelId?: string | null;
      /** Format: int64 */
      maximumNumberOfStoredImages?: number;
      /** Format: int64 */
      maximumTotalSizeOfStoredImages?: number;
    };
    StoragePolicyHydraCollection: {
      id?: string | null;
      withContext?: boolean;
      context?: string | null;
      type?: string | null;
      /** Format: int32 */
      totalItems?: number;
      /** Format: int32 */
      pageSize?: number | null;
      members?: components["schemas"]["StoragePolicy"][] | null;
      view?: components["schemas"]["PartialCollectionView"];
    };
    ThumbnailPolicy: {
      id?: string | null;
      context?: string | null;
      type?: string | null;
      modelId?: string | null;
      name?: string | null;
      sizes?: number[] | null;
    };
    ThumbnailPolicyHydraCollection: {
      id?: string | null;
      withContext?: boolean;
      context?: string | null;
      type?: string | null;
      /** Format: int32 */
      totalItems?: number;
      /** Format: int32 */
      pageSize?: number | null;
      members?: components["schemas"]["ThumbnailPolicy"][] | null;
      view?: components["schemas"]["PartialCollectionView"];
    };
    TranscoderInput: {
      aspectRatio?: string | null;
      container?: string | null;
      frameRate?: string | null;
      interlaced?: string | null;
      key?: string | null;
      resolution?: string | null;
    };
    TranscoderJob: {
      id?: string | null;
      outputKeyPrefix?: string | null;
      input?: components["schemas"]["TranscoderInput"];
      inputs?: (readonly components["schemas"]["TranscoderInput"][]) | null;
      output?: components["schemas"]["TranscoderOutput"];
      outputs?: (readonly components["schemas"]["TranscoderOutput"][]) | null;
      pipelineId?: string | null;
      status?: string | null;
      timing?: components["schemas"]["TranscoderTiming"];
      userMetadata?: {
        [key: string]: string;
      } | null;
      playlists?: (readonly components["schemas"]["TranscoderPlaylist"][]) | null;
    };
    TranscoderOutput: {
      id?: string | null;
      /** Format: int64 */
      duration?: number;
      /** Format: int64 */
      durationMillis?: number;
      /** Format: int64 */
      fileSize?: number;
      /** Format: int32 */
      height?: number;
      /** Format: int32 */
      width?: number;
      key?: string | null;
      status?: string | null;
      statusDetail?: string | null;
    };
    TranscoderPlaylist: {
      format?: string | null;
      name?: string | null;
      outputKeys?: string[] | null;
      status?: string | null;
      statusDetail?: string | null;
    };
    TranscoderTiming: {
      /** Format: int64 */
      finishTimeMillis?: number;
      /** Format: int64 */
      startTimeMillis?: number;
      /** Format: int64 */
      submitTimeMillis?: number;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
